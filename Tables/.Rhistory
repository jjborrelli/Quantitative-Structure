new.mat[j,i]<-1
}
}
}
new.mat<-new.mat[,order(apply(new.mat,2,sum))]
return(new.mat)
}
niche.web<-niche.model(10,.2)
niche.web
eig.analysis(1000, niche.web)
niche_maker <- function(n, S, C){
niche.list <- list()
for (i in 1:n){
niche.list[[i]]<- niche.model(S, C)
}
return(niche.list)
}
niches <- niche.maker(10, 100, .08)
niches <- niche_maker(10, 100, .08)
eig.analysis(1000, niches)
test <- eig.analysis(1000, niches)
niches <- niche_maker(10, 25, .08)
test <- eig.analysis(1000, niches)2
test <- eig.analysis(1000, niches)
test
apply(test, 2, function(x){sum(x<0)/n})
niches
niches <- lapply(niches, function(x){
for(i in 1:nrow(x)){
for(j in 1:ncol(x)){
if(x[i,j] == 1){x[j,i] <- -1}
}
}
})
niches
niches <- niche_maker(10, 25, .08)
niches
niches1 <- lapply(niches, function(x){
for(i in 1:nrow(x)){
for(j in 1:ncol(x)){
if(x[i,j] == 1){x[j,i] <- -1}
}
}
})
niches1
niches==1
niches[[1]]==1
niches <- niche_maker(10, 25, .08)
niches1 <- lapply(niches, function(x){
for(i in 1:nrow(x)){
for(j in 1:ncol(x)){
if(x[i,j] == 1){x[j,i] <- -1}else{0}
}
}
})
niches1
x=niches[[1]]
for(i in 1:nrow(x)){
for(j in 1:ncol(x)){
if(x[i,j] == 1){x[j,i] <- -1}
}
}
x
niches[[1]]
x=niches[[1]]
for(i in 1:nrow(x)){
for(j in 1:ncol(x)){
if(x[i,j] == 1 & x[j,i]==0){x[j,i] <- -1}
}
}
x
niches <- niche_maker(10, 25, .08)
niches1 <- lapply(niches, function(x){
for(i in 1:nrow(x)){
for(j in 1:ncol(x)){
if(x[i,j] == 1 & x[j,i]==0){x[j,i] <- -1}
}
}
})
niches1
niches <- niche_maker(10, 25, .08)
niches1 <- lapply(niches, function(x){
for(i in 1:nrow(x)){
for(j in 1:ncol(x)){
if(x[i,j] == 1 & x[j,i]==0){x[j,i] <- -1}
}
}
x
})
niches1
test <- eig.analysis(1000, niches)
test
apply(test, 2, function(x){sum(x<0)/n})
test <- eig.analysis(10000, niches)
apply(test, 2, function(x){sum(x<0)/n})
niches <- niche_maker(10, 10, .1)
niches
niches <- niche_maker(10, 10, .15)
niches
niches <- niche_maker(10, 10, .2)
niches
niches <- niche_maker(10, 10, .2)
niches1 <- lapply(niches, function(x){
for(i in 1:nrow(x)){
for(j in 1:ncol(x)){
if(x[i,j] == 1 & x[j,i]==0){x[j,i] <- -1}
}
}
x
})
test <- eig.analysis(1000, niches)
apply(test, 2, function(x){sum(x<0)/n})
niches <- niche_maker(10, 10, .1)
niches1 <- lapply(niches, function(x){
for(i in 1:nrow(x)){
for(j in 1:ncol(x)){
if(x[i,j] == 1 & x[j,i]==0){x[j,i] <- -1}
}
}
x
})
test <- eig.analysis(1000, niches)
apply(test, 2, function(x){sum(x<0)/n})
niches1
niches <- niche_maker(10, 10, .3)
niches1 <- lapply(niches, function(x){
for(i in 1:nrow(x)){
for(j in 1:ncol(x)){
if(x[i,j] == 1 & x[j,i]==0){x[j,i] <- -1}
}
}
x
})
test <- eig.analysis(1000, niches)
apply(test, 2, function(x){sum(x<0)/n})
boxplot(test)
niches <- niche_maker(100, 10, .3)
niches1 <- lapply(niches, function(x){
for(i in 1:nrow(x)){
for(j in 1:ncol(x)){
if(x[i,j] == 1 & x[j,i]==0){x[j,i] <- -1}
}
}
x
})
test <- eig.analysis(1000, niches)
apply(test, 2, function(x){sum(x<0)/n})
boxplot(test)
motif_counter <- function(graph.lists, webs = NULL){
require(igraph)
if(!is.list(graph.lists)){
stop("The input should be a list of graph objects")
}
triad.count <- lapply(graph.lists, triad.census)
triad.matrix <- matrix(unlist(triad.count), nrow = length(graph.lists), ncol = 16, byrow = T)
colnames(triad.matrix) <- c("empty", "single", "mutual", "s5", "s4", "s1", "d4",
"d3", "s2", "s3","d8", "d2", "d1", "d5", "d7", "d6")
triad.df <- as.data.frame(triad.matrix)
motif.data.frame <- data.frame(web = webs, s1 = triad.df$s1, s2 = triad.df$s2, s3 = triad.df$s3, s4 = triad.df$s4,
s5 = triad.df$s5, d1 = triad.df$d1, d2 = triad.df$d2, d3 = triad.df$d3, d4 = triad.df$d4,
d5 = triad.df$d5, d6 = triad.df$d6, d7 = triad.df$d7, d8 = triad.df$d8)
return(motif.data.frame)
}
test.count <- motif_counter(lapply(niches, graph.adjacency), 1:100)
test.count
test.count <- motif_counter(lapply(niches, graph.adjacency), 1:100)[,2:14]
test.count
nq <- apply(test, 2, function(x){sum(x<0)/n})
lm(nq ~ test.count)
matrix(test.count)
lm(nq ~ as.numeric(test.count))
nq
nq <- apply(test, 2, median)
lm(nq ~ test.count$s1+test.count$s2+test.count$s3+test.count$s4+test.count$s5)
lm(nq ~ test.count$s1+test.count$s2+test.count$s3+test.count$s4+test.count$s5+test.count$d1+test.count$d2+test.count$d3+test.count$d4+test.count$d5+test.count$d6+test.count$d7+test.count$d8)
nq <- apply(test, 2, mean)
lm(nq ~ test.count$s1+test.count$s2+test.count$s3+test.count$s4+test.count$s5+test.count$d1+test.count$d2+test.count$d3+test.count$d4+test.count$d5+test.count$d6+test.count$d7+test.count$d8)
nq <- apply(test, 2, function(x){sum(x<0)/n})
lm(nq ~ test.count$s1+test.count$s2+test.count$s3+test.count$s4+test.count$s5+test.count$d1+test.count$d2+test.count$d3+test.count$d4+test.count$d5+test.count$d6+test.count$d7+test.count$d8)
lm(nq ~ test.count$s1+test.count$s2+test.count$s3+test.count$s4+test.count$s5+test.count$d1+test.count$d2+test.count$d3+test.count$d4+test.count$d5+test.count$d6+test.count$d7+test.count$d8)$Coefficients
fit <- lm(nq ~ test.count$s1+test.count$s2+test.count$s3+test.count$s4+test.count$s5+test.count$d1+test.count$d2+test.count$d3+test.count$d4+test.count$d5+test.count$d6+test.count$d7+test.count$d8)
summary(fit)
nq <- apply(test, 2, mean)
fit <- lm(nq ~ test.count$s1+test.count$s2+test.count$s3+test.count$s4+test.count$s5+test.count$d1+test.count$d2+test.count$d3+test.count$d4+test.count$d5+test.count$d6+test.count$d7+test.count$d8)
summary(fit)
niches <- niche_maker(100, 20, .2)
niches1 <- lapply(niches, function(x){
for(i in 1:nrow(x)){
for(j in 1:ncol(x)){
if(x[i,j] == 1 & x[j,i]==0){x[j,i] <- -1}
}
}
x
})
niches1
eig.analysis <- function(n, matrices){
cols <- length(matrices)
rows <- n
eigenMATRIX <- matrix(nrow = rows, ncol = cols)
for(i in 1:n){
ranmat <- lapply(matrices, ran.unif)
eigs <- sapply(ranmat, maxRE)
eigenMATRIX[i,] <- eigs
}
return(eigenMATRIX)
}
test <- eig.analysis(1000, niches)
nq <- apply(test, 2, mean)
boxplot(test)
test.count <- motif_counter(lapply(niches, graph.adjacency), 1:100)[,2:14]
fit <- lm(nq ~ test.count$s1+test.count$s2+test.count$s3+test.count$s4+test.count$s5+test.count$d1+test.count$d2+test.count$d3+test.count$d4+test.count$d5+test.count$d6+test.count$d7+test.count$d8)
summary(fit)
fit <- lm(nq ~ test.count$s1+test.count$s2+test.count$s3+test.count$s4+test.count$s5)#+test.count$d1+test.count$d2+test.count$d3+test.count$d4+test.count$d5+test.count$d6+test.count$d7+test.count$d8)
summary(fit)
fit <- lm(test ~ test.count$s1+test.count$s2+test.count$s3+test.count$s4+test.count$s5)#+test.count$d1+test.count$d2+test.count$d3+test.count$d4+test.count$d5+test.count$d6+test.count$d7+test.count$d8)
nq <- apply(test, 2, median)
fit <- lm(nq ~ test.count$s1+test.count$s2+test.count$s3+test.count$s4+test.count$s5)#+test.count$d1+test.count$d2+test.count$d3+test.count$d4+test.count$d5+test.count$d6+test.count$d7+test.count$d8)
fit
summary(fit)
fit <- lm(nq ~ test.count$s1+test.count$s2+test.count$s3+test.count$s4+test.count$s5 -1)#+test.count$d1+test.count$d2+test.count$d3+test.count$d4+test.count$d5+test.count$d6+test.count$d7+test.count$d8)
summary(fit)
web_permutation <- function(webmatrices, fixedmar, times){
#Input list of adjacency matrices - webmatrices
#Input whether to fix rows, columns, or both - fixedmar
#Input number of permuted matrices to generate
require(vegan)
if (!is.list(webmatrices)){
webmatrices <- list(webmatrices)
warning("not a list")
}
len <- length(webmatrices)
p.motif <- list()
for (i in 1:len){
permuted <- permatfull(webmatrices[[i]], fixedmar = fixedmar, mtype = "prab", times = times)
permuted.graphs <- lapply(permuted$perm, graph.adjacency)
p.motif[[i]] <- motif_counter(permuted.graphs, webs = as.character(1:times))
}
return(p.motif)
#Output is a dataframe of motif frequencies
}
system.time(
permutes <- web_permutation(niches1, fixedmar = "both", times = 1000)
)
system.time(
permutes <- web_permutation(niches1, fixedmar = "both", times = 200)
)
permutes
permean.both<- sapply(permutes, FUN = function(x){apply(x[,2:14], 2, mean)})
persd.both<- sapply(permutes, FUN = function(x){apply(x[,2:14], 2, sd)})
z.both <- (sub.counts - t(permean.both)) / t(persd.both)
z.both[is.nan(as.matrix(z.both))] <- 0
z.norm <- apply(z.stand, 2, FUN = function(x){(x * abs(sum(x)))/sqrt(sum(x^2))})
test.count
z.both <- (test.count - t(permean.both)) / t(persd.both)
z.both[is.nan(as.matrix(z.both))] <- 0
z.norm <- apply(z.stand, 2, FUN = function(x){(x * abs(sum(x)))/sqrt(sum(x^2))})
z.both
z.norm <- apply(z.both, 2, FUN = function(x){(x * abs(sum(x)))/sqrt(sum(x^2))})
z.norm
fit <- lm(nq ~ z.norm$s1+z.norm$s2+z.norm$s3+z.norm$s4+z.norm$s5 -1)#+z.norm$d1+z.norm$d2+z.norm$d3+z.norm$d4+z.norm$d5+z.norm$d6+z.norm$d7+z.norm$d8)
fit <- lm(nq ~ z.norm[,1]+z.norm$[,2]+z.norm$[,3]+z.norm$[,4]+z.norm$[,5] -1)#+z.norm$d1+z.norm$d2+z.norm$d3+z.norm$d4+z.norm$d5+z.norm$d6+z.norm$d7+z.norm$d8)
fit <- lm(nq ~ z.norm[,1]+z.norm[,2]+z.norm[,3]+z.norm[,4]+z.norm[,5] -1)#+z.norm$d1+z.norm$d2+z.norm$d3+z.norm$d4+z.norm$d5+z.norm$d6+z.norm$d7+z.norm$d8)
summary(fit)
fit <- lm(nq ~ z.norm[,1]+z.norm[,2]+z.norm[,3]+z.norm[,4]+z.norm[,5] )#+z.norm$d1+z.norm$d2+z.norm$d3+z.norm$d4+z.norm$d5+z.norm$d6+z.norm$d7+z.norm$d8)
summary(fit)
fit <- lm(nq ~ z.norm
)
summary(fit)
# Bascompte et al. Quantitative network
require(igraph)
require(NetIndices)
setwd("~/Dropbox/Food Web Database/Food_Web/Quantitative Network/")
bmatrix <- read.csv("interactionsmarine.csv", header = TRUE, row.names = 1)
bmatrix <- as.matrix(bmatrix)
bgraph <- graph.adjacency(bmatrix, mode = "directed", weighted = TRUE)
plot.igraph(bgraph, layout = layout.circle, vertex.size = 1, edge.arrow.size = .25, vertex.label = NA)
bgraph
bel <- get.edgelist(bgraph)
bweights <- E(bgraph)$weight
quantile(bweights)
q75 <- which(bweights > .00239)
q50 <- which(bweights > .00030243)
q25 <- which(bweights > .000033)
q0 <- which(bweights > 0)
b75 <- graph.edgelist(bel[q75,])
b50 <- graph.edgelist(bel[q50,])
b25 <- graph.edgelist(bel[q25,])
ball <- graph.edgelist(bel[q0,])
require(reshape2)
require(devtools)
source_url("https://raw.github.com/jjborrelli/Ecological-Networks/master/Food%20Webs/Rscripts/web_functions.R")
bsubs <- list(b75, b50, b25, ball)
motif.counts <- motif_counter(bsubs, webs = c("b75", "b50", "b25", "ball"))
null_counts <- null_motifs(bsubs, graph.names = c("b75", "b50", "b25", "ball"), sample = 100, iter = 5000)
null_counts <- split(null_counts, null_counts$web)
#null_counts <- melt(null_counts, id.vars = c("web", "s1", "s2", "s3", "s4", "s5", "d1", "d2",
#                                             "d3", "d4", "d5", "d6", "d7", "d8"))
nulls <- list(null_counts[[3]][,2:14], null_counts[[2]][,2:14], null_counts[[1]][,2:14], null_counts[[4]][,2:14])
null.mean <- t(sapply(nulls, colMeans))
null.sd <- t(sapply(nulls, FUN = function(x){apply(x, 2, sd)}))
plot(t((motif.counts[,2:14] - null.mean) / null.sd)[,4])
bwebind <- get_fw_indices(adj.list = lapply(bsubs, get.adjacency, sparse = F),
graphs = bsubs, web = c("b75", "b50", "b25", "ball"))
bnodeprops <- get_node_properties(adj.list = lapply(bsubs, get.adjacency, sparse = F),
web = c("b75", "b50", "b25", "ball"))
require(ggplot2)
troplot <- ggplot(bnodeprops, aes(x = TL))
troplot <- troplot + geom_histogram(aes(y = ..density..), binwidth = .2, colour = "black", fill = "white")
troplot + facet_grid(L1 ~ .) + geom_density(alpha = .2, fill = "#FF6666")
source_url("https://raw.github.com/jjborrelli/Ecological-Networks/master/FoodWebs/Rscripts/web_functions.R")
bsubs <- list(b75, b50, b25, ball)
motif.counts <- motif_counter(bsubs, webs = c("b75", "b50", "b25", "ball"))
null_counts <- null_motifs(bsubs, graph.names = c("b75", "b50", "b25", "ball"), sample = 100, iter = 5000)
null_counts <- split(null_counts, null_counts$web)
#null_counts <- melt(null_counts, id.vars = c("web", "s1", "s2", "s3", "s4", "s5", "d1", "d2",
#                                             "d3", "d4", "d5", "d6", "d7", "d8"))
nulls <- list(null_counts[[3]][,2:14], null_counts[[2]][,2:14], null_counts[[1]][,2:14], null_counts[[4]][,2:14])
null.mean <- t(sapply(nulls, colMeans))
null.sd <- t(sapply(nulls, FUN = function(x){apply(x, 2, sd)}))
plot(t((motif.counts[,2:14] - null.mean) / null.sd)[,4])
bwebind <- get_fw_indices(adj.list = lapply(bsubs, get.adjacency, sparse = F),
graphs = bsubs, web = c("b75", "b50", "b25", "ball"))
bnodeprops <- get_node_properties(adj.list = lapply(bsubs, get.adjacency, sparse = F),
web = c("b75", "b50", "b25", "ball"))
require(ggplot2)
troplot <- ggplot(bnodeprops, aes(x = TL))
troplot <- troplot + geom_histogram(aes(y = ..density..), binwidth = .2, colour = "black", fill = "white")
troplot + facet_grid(L1 ~ .) + geom_density(alpha = .2, fill = "#FF6666")
t((motif.counts[,2:14] - null.mean) / null.sd)
setwd("~/Desktop/GitHub/Quantitative-Structure/Tables")
bas.zscor <- t((motif.counts[,2:14] - null.mean) / null.sd)
is.na(bas.zscor)
bas.zscor[is.na(bas.zscor)]
bas.zscor[is.na(bas.zscor)] <- 0
bas.zscor
plot(bas.zscor[,1])
points(bas.zscor[,2], col = "blue")
?write.csv
write.csv(bas.zscor, file = "basc_zscore.csv")
plot(bas.zscore[,1], ylim = c(-7, 16))
plot(bas.zscor[,1], ylim = c(-7, 16))
points(bas.zscor[,2], col = "blue")
points(bas.zscor[,3], col = "blue")
points(bas.zscor[,4], col = "blue")
plot(bas.zscor[,1], ylim = c(-7, 16))
points(bas.zscor[,2], col = "blue")
points(bas.zscor[,3], col = "red")
points(bas.zscor[,4], col = "orange")
plot(bas.zscor[,1], ylim = c(-10, 16))
points(bas.zscor[,2], col = "blue")
points(bas.zscor[,3], col = "red")
points(bas.zscor[,4], col = "orange")
plot(bas.zscor[,1], ylim = c(-10, 16), typ = "b")
plot(bas.zscor[,1], ylim = c(-10, 16), typ = "b")
points(bas.zscor[,2], col = "blue", typ = "b")
points(bas.zscor[,3], col = "red", typ = "b")
points(bas.zscor[,4], col = "orange", typ = "b")
abline(h = 0)
require(ggplot2)
bas.zscor
names(bas.zscor) <- c("b75", "b50", "b25", "ball")
plot(bas.zscor[,1], ylim = c(-10, 16), typ = "b")
points(bas.zscor[,2], col = "blue", typ = "b")
points(bas.zscor[,3], col = "red", typ = "b")
points(bas.zscor[,4], col = "orange", typ = "b")
abline(h = 0)
data.frame(bas.zscor)
bas.zscor
bas.zscor <- t((motif.counts[,2:14] - null.mean) / null.sd)
bas.zscor[is.na(bas.zscor)] <- 0
colnames(bas.zscor) <- c("b75", "b50", "b25", "ball")
bas.zscor
ggplot(data.frame(bas.zscor), aes(x = names(bas.zscor), y = b75))
ggplot(data.frame(bas.zscor), aes(x = names(bas.zscor), y = b75)) + geom_path()
ggplot(data.frame(bas.zscor), aes(x = 1:13, y = b75)) + geom_path()
motif.counts
bas.zscor
ggplot(data.frame(bas.zscor), aes(x = rownames(bas.zscore))) + geom_path(aes(x = 1:13, y = b75))
ggplot(data.frame(bas.zscor), aes(x = rownames(bas.zscore))) + geom_path(aes( y = b75))
ggplot(data.frame(bas.zscor), aes(x = rownames(bas.zscor))) + geom_path(aes( y = b75))
ggplot(data.frame(bas.zscor), aes(x = rownames(bas.zscor))) + geom_path(aes(x = 1:13, y = b75))
ggplot(data.frame(bas.zscor), aes(x = rownames(bas.zscor), y = b75)) + geom_path()
ggplot(data.frame(bas.zscor), aes(x = rownames(bas.zscor), y = b75)) + geom_line()
ggplot(data.frame(bas.zscor), aes(x = rownames(bas.zscor), y = b75)) + geom_point()
bas.zscor
ggplot(data.frame(bas.zscor), aes(x = factor(rownames(bas.zscor)), y = b75)) + geom_point()
sort(factor(rownames(bas.zscor)))
sort(factor(rownames(bas.zscor)), decreasing = T)
rev.sort(factor(rownames(bas.zscor)), decreasing = T)
?revsort
s <- sort(factor(rownames(bas.zscor)), decreasing = T)
ggplot(data.frame(bas.zscor), aes(x = s, y = b75)) + geom_point()
ggplot(data.frame(bas.zscor), aes(x = s, y = b75)) + geom_point() + geom_path(aes(x = 1:13, y = b75))
ggplot(data.frame(bas.zscor), aes(x = s, y = b75)) + geom_point() + geom_path(aes(x = 1:13, y = b75]s))
ggplot(data.frame(bas.zscor), aes(x = s, y = b75)) + geom_point() + geom_path(aes(x = 1:13, y = b75[s]))
ggplot(data.frame(bas.zscor), aes(x = s, y = b75)) + geom_path(aes(x = 1:13, y = b75[s])) + geom_point()
ggplot(data.frame(bas.zscor), aes(x = s, y = b75)) + geom_point() + geom_path(aes(x = 1:13, y = b75[s]))
g <- ggplot(data.frame(bas.zscor), aes(x = s, y = b75)) + geom_point() + geom_path(aes(x = 1:13, y = b75[s]))
g <- g + geom_point(aes(x = 1:13, y = b50[s])) + geom_path(aes(x = 1:13, y = b50[s]))
g
bas.zscor
melt(bas.zscor)
m <- melt(bas.scor)
m <- melt(bas.zscor)
g <- ggplot(m, aes(x = Var1, y = value, col = Var2)) + geom_point() + geom_path()
g
g <- ggplot(m, aes(x = Var1, y = value, col = Var2)) + geom_point() + geom_path(aes(x = 1:13, y = value, col = Var2))
g
g <- ggplot(m, aes(x = Var1, y = value, col = Var2)) + geom_point() + geom_path(aes(x = rep(1:13, 4), y = value, col = Var2))
g
g <- ggplot(m, aes(x = Var1, y = value, col = Var2)) + geom_point()
g + geom_path(aes(x = rep(1:13, 4), y = value[factor(Var1)], col = Var2))
g <- ggplot(m, aes(x = Var1, y = value, col = Var2)) + geom_point()
g + geom_path(aes(x = rep(1:13, 4), y = value[sort(factor(Var1))], col = Var2))
bwebind <- get_fw_indices(adj.list = lapply(bsubs, get.adjacency, sparse = F),
g <- ggplot(m, aes(x = Var1, y = value, col = Var2)) + geom_point()
g + geom_path(aes(x = rep(1:13, 4), y = value[sort(factor(Var2))], col = Var2))
g <- ggplot(m, aes(x = Var1, y = value, col = Var2)) + geom_point()
g + geom_path(aes(x = rep(1:13, 4), y = value[sort(factor(Var2))], col = Var2))
sort(factor(Var2))
g <- ggplot(m, aes(x = Var1, y = value, col = Var2)) + geom_point()
g + geom_path(aes(x = rep(1:13, 4), y = value[Var2], col = Var2))
m$Var2
g + geom_path(aes(x = rep(1:13, 4), y = value[m$Var1], col = Var2))
m$Var1
s
s <- rownames(bas.zscor)
s
s <- factor(rownames(bas.zscor))
s
g <- ggplot(m, aes(x = Var1, y = value, col = Var2)) + geom_point()
g + geom_path(aes(x = rep(1:13, 4), y = value[s], col = Var2))
s <- levels(factor(rownames(bas.zscor)))
s
s2 <- rep(s, 4)
s2
s2 <- factor(rep(s, 4))
g <- ggplot(m, aes(x = Var1, y = value, col = Var2)) + geom_point()
g + geom_path(aes(x = rep(1:13, 4), y = value[s2], col = Var2))
s2
g + geom_path(aes(x = s2, y = value[s2], col = Var2))
g + geom_path(aes(x = rep(1:13, 4), y = value[s2], col = Var2))
m$value[s2]
m$value
g <- ggplot(m, aes(x = Var1, y = value, col = Var2)) + geom_point()
g + geom_path(aes(x = rep(1:13, 4), y = value, col = Var2))
s2 <- rep(s, 4)
s2
g <- ggplot(m, aes(x = Var1[s2], y = value, col = Var2)) + geom_point()
g + geom_path(aes(x = rep(1:13, 4), y = value, col = Var2))
g <- ggplot(m, aes(x = Var1, y = value, col = Var2)) + geom_point()
g + geom_path(aes(x = rep(1:13, 4), y = value, col = Var2))
s <- levels(factor(rownames(bas.zscor)))
s2 <- factor(rep(s, 4))
s2
s <- c(6, 7, 8, 9, 10, 11, 12, 13, 1, 2, 3, 4, 5)
g <- ggplot(m, aes(x = Var1, y = value, col = Var2)) + geom_point()
g + geom_path(aes(x = rep(s, 4), y = value, col = Var2))
g <- ggplot(m, aes(x = Var1, y = value, col = Var2)) + geom_point()
g + geom_path(aes(x = rep(1:13, 4), y = value[s], col = Var2))
g + geom_path(aes(x = rep(1:13, 4), y = value[rep(s, 4)], col = Var2))
m
s <- c(9, 10, 11, 12, 13, 1, 2, 3, 4, 5, 6, 7, 8)
g <- ggplot(m, aes(x = Var1, y = value, col = Var2)) + geom_point()
g + geom_path(aes(x = rep(s, 4), y = value, col = Var2))
rep(s, 4)
cbind(rep(s, 4), m$Var1)
cbind(factor(rep(s, 4)), factor(m$Var1))
data.frame(factor(rep(s, 4)), factor(m$Var1))
g <- ggplot(m, aes(x = Var1, y = value, col = Var2)) + geom_point()
g + geom_path(aes(x = rep(1:13, 4), y = value[rep(s, 4)], col = Var2))
m$value[rep(s, 4)]
m$value
s2 <- c(s, s+13, s+23, s+36)
g <- ggplot(m, aes(x = Var1, y = value, col = Var2)) + geom_point()
g + geom_path(aes(x = rep(1:13, 4), y = value[s2], col = Var2))
s2
length(m$values)
m
length(m$value)
s*4
length(s)*4
s+36
s+13
s
s2 <- c(s, s+13, s+26, s+39)
g <- ggplot(m, aes(x = Var1, y = value, col = Var2)) + geom_point()
g + geom_path(aes(x = rep(1:13, 4), y = value[s2], col = Var2))
s2
47+5
m$Var1
m
cbind(m, s2)
m2 <- cbind(m, s2)
g <- ggplot(m, aes(x = Var1, y = value, col = Var2)) + geom_point()
g + geom_path(data = m2, aes(x = s2, y = value, col = Var2))
g <- ggplot(m, aes(x = Var1, y = value, col = Var2)) + geom_point()
g
motif.counts
bas.zscor
z.norm <- apply(bas.zscor, 2, FUN = function(x){(x * abs(sum(x)))/sqrt(sum(x^2))})
z.norm
m <- melt(z.norm)
s <- c(9, 10, 11, 12, 13, 1, 2, 3, 4, 5, 6, 7, 8)
s2 <- c(s, s+13, s+26, s+39)
m2 <- cbind(m, s2)
g <- ggplot(m, aes(x = Var1, y = value, col = Var2)) + geom_point()
g
g <- ggplot(m, aes(x = Var1, y = value, col = Var2)) + geom_point(size = 2)
g
g <- ggplot(m, aes(x = Var1, y = value, col = Var2)) + geom_point(size = 3)
g
